#!/bin/sh

if [ ! -f /usr/local/bin/brew ]; then
  echo "Homebrew is not installed."
  printf "Install Homebrew? (Y/N) "
  read -r response
  if [ "$response" = "Y" ] || [ "$response" = "y" ]; then
    # command from: https://brew.sh
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
fi

# Install my dotfiles
# Note that this script is stored *in* my dotfiles, so needs to be curled from
# GitHub on first run, then deleted (to stay up to date)
if [ ! -d "$HOME"/.dotfiles ]; then
  printf "Clone dotfiles? (Y/N) "
  read -r response
  if [ "$response" = "Y" ] || [ "$response" = "y" ]; then
    cd "$HOME" || exit 1
    git clone https://github.com/adammck/dotfiles.git .dotfiles
    ls -1AF .dotfiles | grep -v /$ | grep -Fv README.md | xargs -I{} -n1 ln -sf .dotfiles/{} .
    cd - || exit 1
  fi
fi

# Install my brews
# These are stored in `~/.Brewfile`, which is a symlink into `.dotfiles`.
printf "Run Homebrew? (Y/N) "
read -r response
if [ "$response" = "Y" ] || [ "$response" = "y" ]; then
  brew bundle --global install
fi

# Set up config syncing (via iCloud Drive) for misc apps
SYNC_ROOT="$HOME"/Library/Mobile\ Documents/com\~apple\~CloudDocs/Sync
if [ -d "$SYNC_ROOT" ]; then
  printf "Set up config sync? (Y/N) "
  read -r response
  if [ "$response" = "Y" ] || [ "$response" = "y" ]; then

    # Sublime Text
    LOCAL="$HOME"/Library/Application\ Support/Sublime\ Text\ 3/Packages/User
    if [ ! -L "$LOCAL" ]; then
      trash "$LOCAL" # Okay to fail
      ln -s "$SYNC_ROOT"/Sublime\ Text/User "$LOCAL"
    fi

    # OpenEmu
    LOCAL="$HOME"/Library/Application\ Support/OpenEmu
    if [ ! -L "$LOCAL" ]; then
      trash "$LOCAL" # Okay to fail
      ln -s "$SYNC_ROOT"/OpenEmu "$LOCAL"
    fi

    # Alfred
    # (Using config sync feature, not symlink)
    defaults write com.runningwithcrayons.Alfred-Preferences syncfolder -string "$SYNC_ROOT/Alfred"
  fi
fi

# Use Brew-installed bash as default login shell
if [ "$SHELL" != "/usr/local/bin/bash" ]; then
  printf "Set default login shell? (Y/N) "
  read -r response
  if [ "$response" = "Y" ] || [ "$response" = "y" ]; then
    if ! grep -q /usr/local/bin/bash /etc/shells; then
      echo "/usr/local/bin/bash" | sudo tee -a /etc/shells
    fi

    chsh -s /usr/local/bin/bash
  fi
fi

# For reference, see:
# https://github.com/mathiasbynens/dotfiles/blob/master/.macos

printf "Configure MacOS defaults? (Y/N) "
read -r response
if [ "$response" = "Y" ] || [ "$response" = "y" ]; then

  # Quit System Preferences first
  osascript -e 'tell application "System Preferences" to quit'

  # ---- finder 

  # New Finder windows open to home dir
  defaults write com.apple.finder NewWindowTarget -string "PfHm";
  defaults write com.apple.finder NewWindowTargetPath -string "file://$HOME";

  # Show hidden files in Finder
  defaults write com.apple.finder AppleShowAllFiles TRUE

  # Show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Keep folders on top when sorting by name
  defaults write com.apple.finder _FXSortFoldersFirst -bool true
  defaults write com.apple.finder _FXSortFoldersFirstOnDesktop -bool true

  # Use column view in all Finder windows by default
  # Four-letter codes for the other view modes: `icnv`, `Nlsv`, `clmv`, `glyv`
  defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

  # Disable "optimized storage", so all files in iCloud Drive are downloaded
  defaults write com.apple.bird optimize-storage 0

  # ---- interface

  # Hide the dock when not in use
  # (Mostly because my iMac screen has terrible ghosting)
  defaults write com.apple.dock autohide -int 1

  # Show date in clock
  defaults write com.apple.menuextra.clock DateFormat -string "EEE MMM d  h:mm a"

  # ---- input

  # Fast key repeat, short delay
  defaults write NSGlobalDomain InitialKeyRepeat -int 15
  defaults write NSGlobalDomain KeyRepeat -int 2

  # Enable right mouse button
  defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode -string "TwoButton"
  defaults write com.apple.AppleMultitouchMouse MouseButtonMode -string "TwoButton"

  # Disable auto-correct stuff from Prefs -> Keyboard -> Text
  defaults write "Apple Global Domain" WebAutomaticSpellingCorrectionEnabled 0
  defaults write "Apple Global Domain" NSAutomaticCapitalizationEnabled 0
  defaults write "Apple Global Domain" NSAutomaticPeriodSubstitutionEnabled 0
  defaults write "Apple Global Domain" NSAutomaticSpellingCorrectionEnabled 0

  # Disable "Show Spotlight search" hotkey. I use Alfred instead.
  defaults write com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 64 "<dict><key>enabled</key><false/></dict>"

  # ---- music

  # Quit Music (n√©e iTunes) first
  osascript -e 'tell application "Music" to quit'

  # Disable notifications when changing track
  defaults write com.apple.music userWantsPlaybackNotifications -int 0

  # Restart Finder and Dock to apply some of the interface settings.
  if [ -t 0  ] || [ -p /dev/stdin ]; then
    printf "Restart Finder and Dock, to apply settings? (Y/N) "
    read -r response
    if [ "$response" = "Y" ] || [ "$response" = "y" ]; then
      # TODO: Can we use osascript here?
      killall Finder
      killall Dock
    fi
  fi
fi
